---

- name: Configure Sonarqube
  hosts: local
  connection: local
  become: true
  tasks:
    - name: Update Repository Cache
      retries: 2
      delay: 10
      apt:
        update_cache: true
    
    - name: Install PostgreSQL
      apt: 
        name: "{{ item }}" 
        state: present
      with_items:
        - acl
        - postgresql
        - postgresql-contrib
        - libpq-dev
        - python3-psycopg2
      
    - name: Install SonarQube Requirements
      apt: 
        name: "{{ item }}" 
        state: present
      with_items:
        - openjdk-11-jdk
        - fontconfig-config 
        - libfreetype6
        - zip
        - unzip

    - name: Strip carriage returns from scripts to ensure this works from Windows VMs
      replace:
        path: "/tmp/files/db-setup.sh"
        regexp: "[\r]$"
        replace: ""

    - name: Create postgres user and DB for SonarQube
      become: yes
      become_user: postgres
      command: "/tmp/files/db-setup.sh {{ sonar_db_pass }}"
    
    - name: Create the sonar user for running the SonarQube services
      user:
        name: sonar
        comment: System user for running SonarQube

    - name: Download SonarQube
      get_url:
        url: "{{ sonar_download_url }}"
        dest: "/srv/sonarqube-{{ sonar_version }}.zip"

    - name: Extract SonarQube
      unarchive:
        src: "/srv/sonarqube-{{ sonar_version }}.zip"
        dest: "/srv"
        copy: no
        owner: sonar

    - name: Link this version of sonarqube as the server SonarQube version
      file:
        src: "/srv/sonarqube-{{ sonar_version }}"
        dest: "/srv/sonarqube"
        state: link
        owner: sonar

    - name: Configure SonarQube Port
      lineinfile:
        path: "/srv/sonarqube/conf/sonar.properties"
        regexp: "^sonar.web.port="
        insertafter: "^#sonar.web.port="
        line: "sonar.web.port=9000"

    - name: Configure SonarQube DB username
      lineinfile:
        path: "/srv/sonarqube/conf/sonar.properties"
        regexp: "^sonar.jdbc.username="
        insertafter: "^#sonar.jdbc.username="
        line: "sonar.jdbc.username={{ sonar_db_user }}"

    - name: Configure SonarQube DB password
      lineinfile:
        path: "/srv/sonarqube/conf/sonar.properties"
        regexp: "^sonar.jdbc.password="
        insertafter: "^#sonar.jdbc.password="
        line: "sonar.jdbc.password={{ sonar_db_pass }}"
    
    - name: Configure SonarQube DB connection string
      lineinfile:
        path: "/srv/sonarqube/conf/sonar.properties"
        regexp: "sonar.jdbc.url=jdbc:postgresql://localhost/sonar"
        insertafter: "^#sonar.jdbc.url=jdbc:postgresql://localhost/sonar"
        line: "sonar.jdbc.url=jdbc:postgresql://localhost/sonar"

    - name: Configure SonarQube to run as the sonar user
      lineinfile:
        path: "/srv/sonarqube/bin/linux-x86-64/sonar.sh"
        regexp: "RUN_AS_USER=sonar"
        insertafter: "#RUN_AS_USER="
        line: "RUN_AS_USER=sonar"

    - name: Install the sonarqube plugins
      get_url:
        url: "{{ item }}"
        dest: /srv/sonarqube/extensions/plugins
      with_items: 
        - "{{ groups['sonar_plugins'] }}"

    - name: Set ElasticSearch requirements
      sysctl:
        name: vm.max_map_count
        value: 524288
        state: present
        reload: yes

    - name: Copy the SonarQube service configuration file
      copy:
        src: "/tmp/files/sonarqube.service"
        dest: "/etc/systemd/system/sonarqube.service"

    - name: Configure OS security limits for the sonar user
      copy:
        src: "/tmp/files/sonarqube.limits"
        dest: "/etc/security/limits.d/99-sonarqube.conf"

    - name: Configure kernel level limits for ElasticSearch
      copy:
        src: "/tmp/files/sonarqube.sysctl"
        dest: "/etc/sysctl.d/99-sonarqube.conf"

    - name: Enable the SonarQube service
      systemd:
        state: started
        enabled: yes
        daemon_reload: yes
        name: sonarqube